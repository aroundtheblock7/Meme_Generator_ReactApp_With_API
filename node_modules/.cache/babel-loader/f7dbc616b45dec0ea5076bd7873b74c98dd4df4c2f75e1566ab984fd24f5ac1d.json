{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeangeloi/Documents/Scrimba (React Course)/meme_generator (using create-react-app)/src/components/Meme.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect } from 'react';\n//import memesData from \"../memesData.js\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Meme() {\n  _s();\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState([]);\n\n  // useEffect(() => {\n  //     fetch(\"https://api.imgflip.com/get_memes\")\n  //         .then(res => res.json())\n  //         .then(data => setAllMemes(data.data.memes))\n  // }, [])\n\n  //Using async await here instead of .then above. Must create a new function and then call it\n\n  useEffect(() => {\n    async function getMemes() {\n      const res = await fetch(\"https://api.imgflip.com/get_memes\");\n      const data = await res.json();\n      setAllMemes(data.data.memes);\n    }\n    getMemes();\n  }, []);\n  const getMemeImage = () => {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  };\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new Meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"memeImage\",\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"gblDJoTpmpR+W462MCmJAhM6D3Y=\");\n_c = Meme;\nexport default Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","getMemes","res","fetch","data","json","memes","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alt","src","_c","$RefreshReg$"],"sources":["/Users/josephdeangeloi/Documents/Scrimba (React Course)/meme_generator (using create-react-app)/src/components/Meme.js"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\n//import memesData from \"../memesData.js\"\n\nfunction Meme() {\n\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\"\n    })\n\n    const [allMemes, setAllMemes] = React.useState([])\n\n    // useEffect(() => {\n    //     fetch(\"https://api.imgflip.com/get_memes\")\n    //         .then(res => res.json())\n    //         .then(data => setAllMemes(data.data.memes))\n    // }, [])\n\n    //Using async await here instead of .then above. Must create a new function and then call it\n\n    useEffect(() => {\n        async function getMemes() {\n            const res = await fetch(\"https://api.imgflip.com/get_memes\")\n            const data = await res.json()\n            setAllMemes(data.data.memes)\n        }\n        getMemes()\n    }, [])\n\n    const getMemeImage = () => {\n        const randomNumber = Math.floor(Math.random() * allMemes.length);\n        const url = allMemes[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: url\n        }))\n    }\n\n    function handleChange(event) {\n        const {name, value} = event.target;\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            [name]: value\n        }));\n    }\n\n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    type=\"text\" \n                    placeholder=\"Top text\"\n                    className=\"form--input\"\n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange={handleChange}\n                />\n                <input \n                    type=\"text\" \n                    placeholder=\"Bottom text\"\n                    className=\"form--input\"\n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                    onChange={handleChange}\n                />\n                <button\n                    className=\"form--button\"\n                    onClick={getMemeImage}\n                >\n                    Get a new Meme image ðŸ–¼\n                </button>\n            </div>\n            <div className=\"meme\">\n                <img alt=\"memeImage\" src={meme.randomImage} className=\"meme--image\" />\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n            </div>\n        </main>\n    )\n}\n\nexport default Meme;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}